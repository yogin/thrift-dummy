#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'dummy_types'

module DummyService
  class Client
    include ::Thrift::Client

    def compute_value(base)
      send_compute_value(base)
      return recv_compute_value()
    end

    def send_compute_value(base)
      send_message('compute_value', Compute_value_args, :base => base)
    end

    def recv_compute_value()
      result = receive_message(Compute_value_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'compute_value failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_compute_value(seqid, iprot, oprot)
      args = read_args(iprot, Compute_value_args)
      result = Compute_value_result.new()
      result.success = @handler.compute_value(args.base)
      write_result(result, oprot, 'compute_value', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Compute_value_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BASE = 1

    FIELDS = {
      BASE => {:type => ::Thrift::Types::I32, :name => 'base'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Compute_value_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

